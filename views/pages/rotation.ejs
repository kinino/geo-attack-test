<!DOCTYPE html>
<html>
<head>
	<script src="js/three.min.js"></script>
</head>

<body>

	<script>

		var views = [
			{
				left: 0,
				bottom: 0,
				width: 0.5,
				height: 1.0,
				fov: 75
			},
			{
				left: 0.5,
				bottom: 0,
				width: 0.5,
				height: 1.0,
				fov: 100,
				eye: [-50, 200, 400]
			}
		];

	    var /*camera,*/ scene, renderer;
	    var geometry, material, mesh, spacecraft;
		var hasGP;
		var gp;
		var euler;
		var matForward;

		var vecForward, vecUp, vecLeft;
		var objSp;

		// Objeto fijo
		var fixedMesh;

	    init();
	    animate();

	    function init() {

			hasGP = false;
			vecForward = new THREE.Vector3(-1,0,0);
			vecLeft = new THREE.Vector3(0,0,1);
			vecUp = new THREE.Vector3(0,1,0);
			euler = new THREE.Euler( 0, 0, 0, 'XYZ' );

	        //camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
	        //camera.position.z = 1000;

	        scene = new THREE.Scene();
			objSp = new THREE.Object3D();

	        geometry = new THREE.BoxGeometry( 10, 10, 10 );
	        material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );

			var groundGeometry, groundMaterial, ground;

            groundGeometry = new THREE.PlaneGeometry( 1000, 1000, 10, 10 );
            groundMaterial = new THREE.MeshBasicMaterial({ wireframe: true, color: 0x00FF00 });
            ground = new THREE.Mesh( groundGeometry, groundMaterial );

			ground.rotation.set(-Math.PI/2, Math.PI/2000, Math.PI);

            scene.add( ground );

			var boxMaterials = [
				new THREE.MeshBasicMaterial({color:0xFF0000}),
				new THREE.MeshBasicMaterial({color:0x00FF00}),
				new THREE.MeshBasicMaterial({color:0x0000FF}),
				new THREE.MeshBasicMaterial({color:0xFFFF00}),
				new THREE.MeshBasicMaterial({color:0x00FFFF}),
				new THREE.MeshBasicMaterial({color:0xFFFFFF})
			];

			var boxMaterial = new THREE.MeshFaceMaterial(boxMaterials);

	        mesh = new THREE.Mesh( geometry, material );
			fixedMesh = new THREE.Mesh( geometry, material );

			fixedMesh.position.set(20, 0, 20);

			//mesh.position.x=99;
			//mesh.position.y=99;
			//mesh.position.z=99;

			//mesh.quaternion.x = -1;
			//mesh.matrixAutoUpdate = false;
			mesh.userData = new THREE.Euler( 0, 0, 0, 'XYZ' );
			//mesh.rotationAutoUpdate = false;
			//mesh.updateMatrix();

			//camera.position.set(40,40,0);
			//camera.lookAt(new THREE.Vector3(0,0,0) );
			//mesh.add(camera);
			//mesh.add(new THREE.Plane( new THREE.Vector3(-1,0,0), 0));

			// Camara de cubo
			var view = views[0];
			camera = new THREE.PerspectiveCamera( view.fov, window.innerWidth / window.innerHeight, 1, 10000 );
			camera.position.set(40,40,0);
			camera.lookAt(new THREE.Vector3(0,0,0) );
			view.camera = camera;
			mesh.add(camera);

			var loader = new THREE.JSONLoader();
    		loader.load('js/spacecraft.js', modelLoadedCallback);

			// Camara de escena
			var view2 = views[1];
			camera = new THREE.PerspectiveCamera( view2.fov, window.innerWidth / window.innerHeight, 1, 10000 );
			camera.position.x = view2.eye[ 0 ];
			camera.position.y = view2.eye[ 1 ];
			camera.position.z = view2.eye[ 2 ];
			view2.camera = camera;

	        //scene.add( mesh );
			scene.add( fixedMesh );
			//scene.add(camera);
	        renderer = new THREE.WebGLRenderer();
	        renderer.setSize( window.innerWidth, window.innerHeight );

	        document.body.appendChild( renderer.domElement );

	    }

		function modelLoadedCallback(geometry) {
			spacecraft = new THREE.Mesh( geometry, new THREE.MeshFaceMaterial(geometry.materials));
			spacecraft.position.x = 0;
			spacecraft.position.y = 0;
			spacecraft.position.z = 0;
			objSp.add(spacecraft);
			mesh.add(objSp);
			scene.add( mesh );
		}

	    function animate() {

	        // note: three.js includes requestAnimationFrame shim
	        requestAnimationFrame( animate );

			//mesh.translateZ(0.3);
	        //mesh.rotation.x += 0.01;
	        //mesh.rotation.y += 0.02;

			if (hasGP) {
				/*mesh.translateZ( gp.axes[0] * 0.3 * -1 );
				mesh.translateX( gp.axes[1] * 0.3 );*/

				//mesh.translateX( vecForward.x );
				//mesh.translateY( vecForward.y );
				//mesh.translateZ( vecForward.z );

				//console.log("CHEFE");
				reportOnGamepad();
			}

	        //renderer.render( scene, camera );
			for ( var ii = 0; ii < views.length; ++ii ) {
				view = views[ii];
				camera = view.camera;
				//view.updateCamera( camera, scene, mouseX, mouseY );
				var left   = Math.floor( window.innerWidth  * view.left );
				var bottom = Math.floor( window.innerHeight * view.bottom );
				var width  = Math.floor( window.innerWidth  * view.width );
				var height = Math.floor( window.innerHeight * view.height );
				renderer.setViewport( left, bottom, width, height );
				renderer.setScissor( left, bottom, width, height );
				renderer.enableScissorTest ( true );
				renderer.setClearColor( view.background );
				camera.aspect = width / height;
				camera.updateProjectionMatrix();
				renderer.render( scene, camera );
			}

	    }

		function reportOnGamepad() {

			gp = navigator.getGamepads()[0];

			var x, y, z;
			x = gp.axes[0];
			y = gp.axes[1] * -1;

			var angX = 0;
			var angY = 0;

			angY = Math.asin(y);
			angX = Math.asin(x);

			var newQuat = new THREE.Quaternion();

			//if ( mesh.userData.z-angY*0.03 < Math.PI /2 )
			//	mesh.userData = new THREE.Euler(mesh.userData.x/*+angX*0.03*/,mesh.userData.y+angX*0.03,mesh.userData.z-angY*0.03, "XYZ");
			//else
				mesh.userData = new THREE.Euler(mesh.userData.x/*+angX*0.03*/,mesh.userData.y-angX*0.03,mesh.userData.z-angY*0.03, "XYZ");

			newQuat.setFromEuler(mesh.userData);
			console.log(mesh.up);
			mesh.rotation.setFromQuaternion(newQuat);

			/************ TRASLACION **************/

			var plano = new THREE.Plane();
			plano.setFromCoplanarPoints(mesh.geometry.vertices[4],mesh.geometry.vertices[6],mesh.geometry.vertices[5]);

			vecForward = plano.normal;
			vecForward.normalize();

			//console.log(vecForward);

			/************ TRASLACION **************/

			mesh.translateOnAxis(vecForward, 2);

		}

		window.addEventListener("gamepadconnected", function(e) {
			console.log("CONEXION");
			gp = navigator.getGamepads()[0];
		  hasGP = true;
		});

	</script>

</body>
</html>
