<!DOCTYPE html>
<html>
<head>
	<script src="js/three.min.js"></script>
</head>

<body>

	<script>

	    var camera, scene, renderer;
	    var geometry, material, mesh;
		var hasGP;
		var gp;
		var euler;

		var vecForward, vecUp, vecLeft;

		// Objeto fijo
		var fixedMesh;

	    init();
	    animate();

	    function init() {

			hasGP = false;
			vecForward = new THREE.Vector3(-1,0,0);
			vecLeft = new THREE.Vector3(0,0,1);
			vecUp = new THREE.Vector3(0,1,0);
			euler = new THREE.Euler( 0, 0, 0, 'XYZ' );

	        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
	        //camera.position.z = 1000;

	        scene = new THREE.Scene();

	        geometry = new THREE.BoxGeometry( 10, 10, 10 );
	        material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );

			var boxMaterials = [
				new THREE.MeshBasicMaterial({color:0xFF0000}),
				new THREE.MeshBasicMaterial({color:0x00FF00}),
				new THREE.MeshBasicMaterial({color:0x0000FF}),
				new THREE.MeshBasicMaterial({color:0xFFFF00}),
				new THREE.MeshBasicMaterial({color:0x00FFFF}),
				new THREE.MeshBasicMaterial({color:0xFFFFFF})
			];

			var boxMaterial = new THREE.MeshFaceMaterial(boxMaterials);

	        mesh = new THREE.Mesh( geometry, boxMaterial );
			fixedMesh = new THREE.Mesh( geometry, material );

			fixedMesh.position.set(20, 0, 20);

			//mesh.position.x=99;
			//mesh.position.y=99;
			//mesh.position.z=99;

			//mesh.quaternion.x = -1;
			//mesh.matrixAutoUpdate = false;
			mesh.userData = new THREE.Euler( 0, 0, 0, 'XYZ' );
			//mesh.rotationAutoUpdate = false;
			//mesh.updateMatrix();

			camera.position.set(40,40,0);
			camera.lookAt(new THREE.Vector3(0,0,0) );
			//mesh.add(camera);

	        scene.add( mesh );
			scene.add( fixedMesh );
			scene.add(camera);
	        renderer = new THREE.WebGLRenderer();
	        renderer.setSize( window.innerWidth, window.innerHeight );

	        document.body.appendChild( renderer.domElement );

	    }

	    function animate() {

	        // note: three.js includes requestAnimationFrame shim
	        requestAnimationFrame( animate );

			//mesh.translateZ(0.3);
	        //mesh.rotation.x += 0.01;
	        //mesh.rotation.y += 0.02;

			if (hasGP) {
				/*mesh.translateZ( gp.axes[0] * 0.3 * -1 );
				mesh.translateX( gp.axes[1] * 0.3 );*/

				//mesh.translateX( vecForward.x );
				//mesh.translateY( vecForward.y );
				//mesh.translateZ( vecForward.z );

				//console.log("CHEFE");
				reportOnGamepad();
			}

	        renderer.render( scene, camera );

	    }

		function reportOnGamepad() {

			//console.clear();
			gp = navigator.getGamepads()[0];
			//console.log( gp.axes[0] + " " + gp.axes[1] );
			//console.log( gp.axes[2] + " " + gp.axes[3] );

			var x, y, z;
			x = gp.axes[0];
			y = gp.axes[1] * -1;

			//console.log( gp.axes[0] );

			var angX = 0;
			var angY = 0;

			angY = Math.asin(y);
			angX = Math.asin(x);

			//console.log("angX: " + angX);
			//console.log("angY: " + angY);

			/*if (angY > 1)
				angY = 1;
			if (angY < -1)
				angY = -1;

			if (angX > 1)
				angX = 1;
			if (angX < -1)
				angX = -1;*/

			var newQuat = new THREE.Quaternion();
			mesh.userData = new THREE.Euler(mesh.userData.x+0,mesh.userData.y-angX*0.03,mesh.userData.z-angY*0.03, "XYZ");
			newQuat.setFromEuler(mesh.userData);
			//console.log(newQuat);
			//mesh.quaternion.slerp(newQuat, 1);
			//console.log(mesh.rotation);
			mesh.rotation.setFromQuaternion(newQuat);
			//mesh.rotation = new THREE.Euler(mesh.rotation.x+0,mesh.rotation.y-angX*0.5,mesh.rotation.z-angY*0.5, "XYZ");
			//console.log(mesh.rotation);
			//mesh.updateMatrix();
			//console.log("X: " + mesh.quaternion.x + " Y: " + mesh.quaternion.y + " Z: " + mesh.quaternion.z);
			//mesh.translateOnAxis(new THREE.Vector3(mesh.quaternion.x, mesh.quaternion.y, mesh.quaternion.z), 1);

			//console.log(quaternion);
			/*vecForward.applyQuaternion(newQuat);
			var vecTranslation = new THREE.Vector3();
			vecTranslation.copy(vecForward);
			vecTranslation.normalize();
			var dx, dy, dz;
			dx = vecTranslation.x*0.1;
			dy = vecTranslation.y*0.1;
			dz = vecTranslation.z*0.1;

			mesh.translateX(dx);
			mesh.translateY(dy);
			mesh.translateZ(dz);*/
			//console.log(translation);
			//mesh.translateX( -1 );
			//mesh.matrix.setPosition(translation);
			//mesh.matrix.makeTranslation(translation.x, translation.y, translation.z);
			//mesh.updateMatrix();

		}

		window.addEventListener("gamepadconnected", function(e) {
			console.log("CONEXION");
			gp = navigator.getGamepads()[0];
		  hasGP = true;
		});

	</script>

</body>
</html>
